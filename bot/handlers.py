from telegram import Update, ParseMode, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler
from sqlalchemy.orm import Session
import redis
import json
import time
import logging

from database.models import SessionLocal
from database.operations import (
    create_worker, get_all_workers, get_worker, update_worker_status,
    create_account, get_worker_accounts, get_account, update_account_status,
    get_account_by_phone, delete_worker, get_all_accounts
)
from celery_app.tasks import (
    celery_app, register_worker, check_worker_status, add_account_to_worker,
    start_account, stop_account, check_account_status
)
from .keyboards import (
    get_main_menu, get_workers_menu, get_accounts_menu,
    get_worker_control_keyboard, get_account_control_keyboard,
    get_worker_selection_keyboard, get_account_selection_keyboard,
    get_telethon_account_keyboard, get_worker_selection_keyboard_for_accounts
)
from config import REDIS_URL, WORKER_STATUS_KEY_PREFIX, WORKER_LAST_SEEN_KEY_PREFIX, WORKER_ONLINE_TIMEOUT

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
MAIN_MENU, WORKERS_MENU, ACCOUNTS_MENU = range(3)
ADD_ACCOUNT_PHONE, ADD_ACCOUNT_API_ID, ADD_ACCOUNT_API_HASH, ADD_ACCOUNT_CONFIRM = range(3, 7)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis-–∫–ª–∏–µ–Ω—Ç–∞
redis_client = redis.Redis.from_url(REDIS_URL)

# –õ–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_db():
    """–§—É–Ω–∫—Ü–∏—è-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥

def start(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    
    update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–∞–º–∏!\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤:",
        reply_markup=get_main_menu()
    )
    
    return MAIN_MENU

def main_menu_callback(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    query = update.callback_query
    query.answer()
    
    action = query.data
    
    if action == "main_workers":
        return workers_menu(update, context)
    elif action == "main_accounts":
        return accounts_menu(update, context)
    elif action == "back_to_main":
        query.edit_message_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_menu()
        )
        return MAIN_MENU
    
    return MAIN_MENU

def main_menu(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é (–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
    update.message.reply_text(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤:",
        reply_markup=get_main_menu()
    )
    return MAIN_MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–æ—Ä–∫–µ—Ä–æ–≤

def workers_menu(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–µ–Ω—é –≤–æ—Ä–∫–µ—Ä–æ–≤ (–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
    update.message.reply_text(
        "–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–∞–º–∏:",
        reply_markup=get_workers_menu()
    )
    return WORKERS_MENU

def workers_menu_callback(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –º–µ–Ω—é –≤–æ—Ä–∫–µ—Ä–æ–≤"""
    query = update.callback_query
    query.answer()
    
    data = query.data
    
    if data == "workers_list":
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
        db = next(get_db())
        workers = get_all_workers(db)
        
        if not workers:
            query.edit_message_text(
                "–°–ø–∏—Å–æ–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤ –ø—É—Å—Ç. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤–æ—Ä–∫–µ—Ä, —á—Ç–æ–±—ã –æ–Ω –ø–æ—è–≤–∏–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ.",
                reply_markup=get_main_menu()
            )
            return MAIN_MENU
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤–æ—Ä–∫–µ—Ä–æ–≤ –∏–∑ Redis
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            current_time = int(time.time())
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –≤–æ—Ä–∫–µ—Ä–æ–≤
            worker_keys = redis_client.keys(f"{WORKER_STATUS_KEY_PREFIX}*")
            active_worker_names = set()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞ –≤ Redis
            for key in worker_keys:
                worker_name = key.decode('utf-8').replace(WORKER_STATUS_KEY_PREFIX, "")
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ—Ä–∫–µ—Ä–∞
                worker_data_raw = redis_client.get(key)
                worker_data = json.loads(worker_data_raw) if worker_data_raw else None
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
                last_seen_key = f"{WORKER_LAST_SEEN_KEY_PREFIX}{worker_name}"
                last_seen_raw = redis_client.get(last_seen_key)
                last_seen = int(last_seen_raw) if last_seen_raw else 0
                
                # –í–æ—Ä–∫–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω, –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–ª —Å—Ç–∞—Ç—É—Å –Ω–µ–¥–∞–≤–Ω–æ –∏ –Ω–µ –æ—Ç–º–µ—á–µ–Ω —è–≤–Ω–æ –∫–∞–∫ offline
                if worker_data and (current_time - last_seen <= WORKER_ONLINE_TIMEOUT) and worker_data.get('status') != 'offline':
                    active_worker_names.add(worker_name)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ—Ä–∫–µ—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            for worker in workers:
                is_active = worker.name in active_worker_names
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
                if worker.is_active != is_active:
                    update_worker_status(db, worker.id, is_active)
                    worker.is_active = is_active
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
            message = f"–í—Å–µ –≤–æ—Ä–∫–µ—Ä—ã ({len(workers)}):\n\n"
            
            for worker in workers:
                status_emoji = "üü¢" if worker.is_active else "üî¥"
                message += f"{status_emoji} {worker.name} - {worker.server_address}\n"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –≤—ã–±–æ—Ä–∞
            query.edit_message_text(
                message,
                reply_markup=get_worker_selection_keyboard(workers)
            )
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            message = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –≤–æ—Ä–∫–µ—Ä–æ–≤. –ü–æ–∫–∞–∑–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n\n"
            
            for worker in workers:
                status_emoji = "üü¢" if worker.is_active else "üî¥"
                message += f"{status_emoji} {worker.name} - {worker.server_address}\n"
            
            query.edit_message_text(
                message,
                reply_markup=get_worker_selection_keyboard(workers)
            )
        
        return WORKERS_MENU
    
    elif data == "back_to_main":
        query.edit_message_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_menu()
        )
        return MAIN_MENU
    
    return WORKERS_MENU

def worker_callback(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤–æ—Ä–∫–µ—Ä–æ–≤"""
    query = update.callback_query
    query.answer()
    
    data = query.data.split(':')
    action = data[0]
    worker_id = int(data[1]) if len(data) > 1 else None
    
    db = next(get_db())
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if action == "back_to_workers":
        try:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –≤–æ—Ä–∫–µ—Ä–æ–≤
            workers = get_all_workers(db)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
            message = f"–í—Å–µ –≤–æ—Ä–∫–µ—Ä—ã ({len(workers)}):\n\n"
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤–æ—Ä–∫–µ—Ä–æ–≤ –∏–∑ Redis
            current_time = int(time.time())
            active_worker_names = set()
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –≤–æ—Ä–∫–µ—Ä–æ–≤
                worker_keys = redis_client.keys(f"{WORKER_STATUS_KEY_PREFIX}*")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞ –≤ Redis
                for key in worker_keys:
                    worker_name = key.decode('utf-8').replace(WORKER_STATUS_KEY_PREFIX, "")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ—Ä–∫–µ—Ä–∞
                    worker_data_raw = redis_client.get(key)
                    worker_data = json.loads(worker_data_raw) if worker_data_raw else None
                    
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
                    last_seen_key = f"{WORKER_LAST_SEEN_KEY_PREFIX}{worker_name}"
                    last_seen_raw = redis_client.get(last_seen_key)
                    last_seen = int(last_seen_raw) if last_seen_raw else 0
                    
                    # –í–æ—Ä–∫–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω, –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–ª —Å—Ç–∞—Ç—É—Å –Ω–µ–¥–∞–≤–Ω–æ –∏ –Ω–µ –æ—Ç–º–µ—á–µ–Ω —è–≤–Ω–æ –∫–∞–∫ offline
                    if worker_data and (current_time - last_seen <= WORKER_ONLINE_TIMEOUT) and worker_data.get('status') != 'offline':
                        active_worker_names.add(worker_name)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤–æ—Ä–∫–µ—Ä–æ–≤ –∏–∑ Redis: {str(e)}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
            for worker in workers:
                is_active = worker.name in active_worker_names
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
                if worker.is_active != is_active:
                    update_worker_status(db, worker.id, is_active)
                    worker.is_active = is_active
                
                status_emoji = "üü¢" if worker.is_active else "üî¥"
                message += f"{status_emoji} {worker.name} - {worker.server_address}\n"
            
            query.edit_message_text(
                message,
                reply_markup=get_worker_selection_keyboard(workers)
            )
        except Exception as e:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É –≤–æ—Ä–∫–µ—Ä–æ–≤: {str(e)}")
        return WORKERS_MENU
    
    if action == "select_worker":
        worker = get_worker(db, worker_id)
        
        if worker:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ—Ä–∫–µ—Ä–∞ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Redis
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                current_time = int(time.time())
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ—Ä–∫–µ—Ä–∞ –≤ Redis
                worker_key = f"{WORKER_STATUS_KEY_PREFIX}{worker.name}"
                worker_last_seen_key = f"{WORKER_LAST_SEEN_KEY_PREFIX}{worker.name}"
                
                worker_data_raw = redis_client.get(worker_key)
                last_seen_raw = redis_client.get(worker_last_seen_key)
                
                is_active = False
                
                if worker_data_raw and last_seen_raw:
                    worker_data = json.loads(worker_data_raw)
                    last_seen = int(last_seen_raw)
                    
                    # –í–æ—Ä–∫–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω, –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–ª —Å—Ç–∞—Ç—É—Å –Ω–µ–¥–∞–≤–Ω–æ –∏ –Ω–µ –æ—Ç–º–µ—á–µ–Ω —è–≤–Ω–æ –∫–∞–∫ offline
                    if (current_time - last_seen <= WORKER_ONLINE_TIMEOUT) and worker_data.get('status') != 'offline':
                        is_active = True
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ—Ä–∫–µ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                if worker.is_active != is_active:
                    update_worker_status(db, worker_id, is_active)
                    worker.is_active = is_active
                
                status_emoji = "üü¢ –û–Ω–ª–∞–π–Ω" if is_active else "üî¥ –û—Ñ—Ñ–ª–∞–π–Ω"
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ—Ä–∫–µ—Ä–µ
                text = f"ü§ñ <b>–í–æ—Ä–∫–µ—Ä: {worker.name}</b>\n\n"
                text += f"üåê –°–µ—Ä–≤–µ—Ä: {worker.server_address}\n"
                text += f"üîÑ –°—Ç–∞—Ç—É—Å: {status_emoji}\n"
                text += f"‚è± –°–æ–∑–¥–∞–Ω: {worker.created_at.strftime('%d.%m.%Y %H:%M:%S')}\n"
                
                if last_seen_raw:
                    text += f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {time.strftime('%d.%m.%Y %H:%M:%S', time.localtime(int(last_seen_raw)))}\n"
            
            except Exception:
                status_emoji = "‚ùì –°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ—Ä–∫–µ—Ä–µ
                text = f"ü§ñ <b>–í–æ—Ä–∫–µ—Ä: {worker.name}</b>\n\n"
                text += f"üåê –°–µ—Ä–≤–µ—Ä: {worker.server_address}\n"
                text += f"üîÑ –°—Ç–∞—Ç—É—Å: {status_emoji}\n"
                text += f"‚è± –°–æ–∑–¥–∞–Ω: {worker.created_at.strftime('%d.%m.%Y %H:%M:%S')}\n"
            
            try:
                query.edit_message_text(
                    text,
                    reply_markup=get_worker_control_keyboard(worker_id),
                    parse_mode=ParseMode.HTML
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ—Ä–∫–µ—Ä–µ: {str(e)}")
        else:
            query.edit_message_text(
                "–í–æ—Ä–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=None
            )
    
    elif action == "worker_status":
        worker = get_worker(db, worker_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–æ—Ä–∫–µ—Ä–µ –∏–∑ Redis
        worker_key = f"{WORKER_STATUS_KEY_PREFIX}{worker.name}"
        worker_last_seen_key = f"{WORKER_LAST_SEEN_KEY_PREFIX}{worker.name}"
            
        worker_data_raw = redis_client.get(worker_key)
        worker_data = json.loads(worker_data_raw) if worker_data_raw else None
            
        last_seen_raw = redis_client.get(worker_last_seen_key)
        last_seen = int(last_seen_raw) if last_seen_raw else 0
        
        current_time = int(time.time())
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ—Ä–∫–µ—Ä–∞
        status = "üî¥ –û—Ñ—Ñ–ª–∞–π–Ω"
        if worker_data and (current_time - last_seen <= WORKER_ONLINE_TIMEOUT) and worker_data.get('status') != 'offline':
            status = "üü¢ –û–Ω–ª–∞–π–Ω"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –≤–æ—Ä–∫–µ—Ä–∞
        text = f"ü§ñ <b>–í–æ—Ä–∫–µ—Ä: {worker.name}</b>\n\n"
        text += f"üåê –°–µ—Ä–≤–µ—Ä: {worker.server_address}\n"
        text += f"üîÑ –°—Ç–∞—Ç—É—Å: {status}\n"
        text += f"‚è± –°–æ–∑–¥–∞–Ω: {worker.created_at.strftime('%d.%m.%Y %H:%M:%S')}\n"
        
        if last_seen > 0:
            text += f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {time.strftime('%d.%m.%Y %H:%M:%S', time.localtime(last_seen))}\n"
        
        try:
            query.edit_message_text(
                text,
                reply_markup=get_worker_control_keyboard(worker_id),
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–æ—Ä–∫–µ—Ä–∞: {str(e)}")
    
    elif action == "worker_delete":
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ—Ä–∫–µ—Ä–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        worker = get_worker(db, worker_id)
        worker_name = worker.name if worker else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –≤–æ—Ä–∫–µ—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        success = delete_worker(db, worker_id)
        
        if success:
            # –£–¥–∞–ª—è–µ–º —Ç–∞–∫–∂–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ Redis
            try:
                worker_key = f"{WORKER_STATUS_KEY_PREFIX}{worker_name}"
                worker_last_seen_key = f"{WORKER_LAST_SEEN_KEY_PREFIX}{worker_name}"
                
                redis_client.delete(worker_key)
                redis_client.delete(worker_last_seen_key)
            except:
                pass
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤
            workers = get_all_workers(db)
            
            if workers:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≤–æ—Ä–∫–µ—Ä–æ–≤
                message = f"üóëÔ∏è –í–æ—Ä–∫–µ—Ä {worker_name} —É–¥–∞–ª–µ–Ω.\n\n"
                message += f"–û—Å—Ç–∞–≤—à–∏–µ—Å—è –≤–æ—Ä–∫–µ—Ä—ã ({len(workers)}):\n\n"
                
                for w in workers:
                    status_emoji = "üü¢" if w.is_active else "üî¥"
                    message += f"{status_emoji} {w.name} - {w.server_address}\n"
                
                query.edit_message_text(
                    message,
                    reply_markup=get_worker_selection_keyboard(workers)
                )
            else:
                # –ï—Å–ª–∏ –≤–æ—Ä–∫–µ—Ä–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å
                query.edit_message_text(
                    f"üóëÔ∏è –í–æ—Ä–∫–µ—Ä {worker_name} —É–¥–∞–ª–µ–Ω.\n\n"
                    "–°–ø–∏—Å–æ–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤ –ø—É—Å—Ç.",
                    reply_markup=get_main_menu()
                )
                return MAIN_MENU
        else:
            query.edit_message_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–æ—Ä–∫–µ—Ä {worker_name}.",
                reply_markup=get_worker_control_keyboard(worker_id)
            )
    
    elif action == "back_to_main":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        try:
            query.edit_message_text(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–∞–º–∏:",
                reply_markup=get_main_menu()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {str(e)}")
        return MAIN_MENU
    
    elif action == "worker_accounts":
        worker = get_worker(db, worker_id)
        accounts = get_worker_accounts(db, worker_id)
        
        if accounts:
            text = f"üì± <b>–ê–∫–∫–∞—É–Ω—Ç—ã –≤–æ—Ä–∫–µ—Ä–∞ {worker.name}</b> ({len(accounts)}):\n\n"
            
            for i, account in enumerate(accounts, 1):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ Redis
                try:
                    account_status_key = f"account_status:{account.id}"
                    account_status_raw = redis_client.get(account_status_key)
                    
                    if account_status_raw:
                        account_status = json.loads(account_status_raw)
                        is_running = account_status.get('is_running', False)
                        status_emoji = "üü¢" if is_running else "üî¥"
                    else:
                        status_emoji = "‚ö™Ô∏è"
                except:
                    status_emoji = "‚ö†Ô∏è"
                
                text += f"{i}. {status_emoji} <b>{account.phone}</b>\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤–æ—Ä–∫–µ—Ä—É –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            keyboard = [
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data=f"worker_add_account:{worker_id}")],
                [InlineKeyboardButton("üîô –ö –≤–æ—Ä–∫–µ—Ä—É", callback_data=f"select_worker:{worker_id}")]
            ]
            
            query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.HTML
            )
        else:
            # –ï—Å–ª–∏ —É –≤–æ—Ä–∫–µ—Ä–∞ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            text = f"üì± –£ –≤–æ—Ä–∫–µ—Ä–∞ <b>{worker.name}</b> –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n\n–î–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ."
            
            keyboard = [
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data=f"worker_add_account:{worker_id}")],
                [InlineKeyboardButton("üîô –ö –≤–æ—Ä–∫–µ—Ä—É", callback_data=f"select_worker:{worker_id}")]
            ]
            
            query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.HTML
            )
    
    elif action == "worker_add_account":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–æ—Ä–∫–µ—Ä–∞ –≤ context.user_data –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–∑–∂–µ
        context.user_data['selected_worker_id'] = worker_id
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
        query.edit_message_text(
            "üì± <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Telethon</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79123456789):",
            parse_mode=ParseMode.HTML
        )
        
        return ADD_ACCOUNT_PHONE
    
    return WORKERS_MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤

def accounts_menu(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    text = "–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏:\n\n" + \
           "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏."
    
    if update.callback_query:
        update.callback_query.edit_message_text(
            text,
            reply_markup=get_accounts_menu()
        )
    else:
        update.message.reply_text(
            text,
            reply_markup=get_accounts_menu()
        )
    
    return ACCOUNTS_MENU

def accounts_menu_callback(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—Ä–∞—Ç–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    query = update.callback_query
    query.answer()
    
    action = query.data
    
    if action == "accounts_add":
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ—Ä–∫–µ—Ä, –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç:",
            reply_markup=get_worker_selection_keyboard_for_accounts(next(get_db()))
        )
        return ACCOUNTS_MENU
    
    elif action == "accounts_list":
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        db = next(get_db())
        accounts = get_all_accounts(db)
        
        if not accounts:
            query.edit_message_text(
                "üî¥ –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç'.",
                reply_markup=get_accounts_menu()
            )
            return ACCOUNTS_MENU
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ –≤–æ—Ä–∫–µ—Ä–∞–º –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        accounts_by_worker = {}
        for account in accounts:
            worker = get_worker(db, account.worker_id)
            if worker:
                if worker.name not in accounts_by_worker:
                    accounts_by_worker[worker.name] = []
                accounts_by_worker[worker.name].append(account)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = "üì± <b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤</b>\n\n"
        
        if not accounts_by_worker:
            text += "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤."
        else:
            for worker_name, worker_accounts in accounts_by_worker.items():
                text += f"<b>üñ• –í–æ—Ä–∫–µ—Ä {worker_name}</b>\n"
                for account in worker_accounts:
                    status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if account.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                    text += f"  ‚Ä¢ {account.phone} - {status}\n"
                text += "\n"
        
        query.edit_message_text(
            text,
            reply_markup=get_account_selection_keyboard(accounts),
            parse_mode=ParseMode.HTML
        )
        return ACCOUNTS_MENU
    
    elif action == "back_to_main":
        return main_menu_callback(update, context)
    
    return ACCOUNTS_MENU

def add_account_phone(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    phone = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not phone.startswith('+') or not phone[1:].isdigit():
        update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, "
            "–Ω–∞—á–∏–Ω–∞—è —Å '+' (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79123456789):"
        )
        return ADD_ACCOUNT_PHONE
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ context.user_data
    context.user_data['account_phone'] = phone
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º API ID
    update.message.reply_text(
        "üì± <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ Telethon</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ API ID –∞–∫–∫–∞—É–Ω—Ç–∞ Telegram (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12345678):",
        parse_mode=ParseMode.HTML
    )
    
    return ADD_ACCOUNT_API_ID

def add_account_api_id(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ API ID –∞–∫–∫–∞—É–Ω—Ç–∞"""
    api_id = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API ID - —ç—Ç–æ —á–∏—Å–ª–æ
    if not api_id.isdigit():
        update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π API ID:"
        )
        return ADD_ACCOUNT_API_ID
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º API ID –≤ context.user_data
    context.user_data['account_api_id'] = api_id
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º API Hash
    update.message.reply_text(
        "üì± <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ Telethon</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ API Hash –∞–∫–∫–∞—É–Ω—Ç–∞ Telegram (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0123456789abcdef0123456789abcdef):",
        parse_mode=ParseMode.HTML
    )
    
    return ADD_ACCOUNT_API_HASH

def add_account_api_hash(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ API Hash –∞–∫–∫–∞—É–Ω—Ç–∞"""
    api_hash = update.message.text.strip()
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ API Hash
    if len(api_hash) < 10:
        update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API Hash. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ API Hash:"
        )
        return ADD_ACCOUNT_API_HASH
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º API Hash –≤ context.user_data
    context.user_data['account_api_hash'] = api_hash
    
    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    phone = context.user_data.get('account_phone', '')
    api_id = context.user_data.get('account_api_id', '')
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ—Ä–∫–µ—Ä–µ
    worker_id = context.user_data.get('selected_worker_id')
    db = next(get_db())
    worker = get_worker(db, worker_id)
    worker_name = worker.name if worker else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ—Ä–∫–µ—Ä"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="account_confirm"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"select_worker:{worker_id}")
        ]
    ]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    update.message.reply_text(
        f"üì± <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ Telethon</b>\n\n"
        f"<b>–í–æ—Ä–∫–µ—Ä:</b> {worker_name}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
        f"<b>API ID:</b> {api_id}\n"
        f"<b>API Hash:</b> {'*' * len(api_hash)}\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.HTML
    )
    
    return ADD_ACCOUNT_CONFIRM

def add_account_confirm(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    query = update.callback_query
    query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ context.user_data
    phone = context.user_data.get('account_phone', '')
    api_id = context.user_data.get('account_api_id', '')
    api_hash = context.user_data.get('account_api_hash', '')
    worker_id = context.user_data.get('selected_worker_id')
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
    if query.data == "account_confirm":
        db = next(get_db())
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º
            existing_account = get_account_by_phone(db, phone)
            
            if existing_account:
                query.edit_message_text(
                    f"‚ùå –ê–∫–∫–∞—É–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º {phone} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
                    parse_mode=ParseMode.HTML
                )
                return WORKERS_MENU
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            account = create_account(db, phone, api_id, api_hash, worker_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ –≤–æ—Ä–∫–µ—Ä
            worker = get_worker(db, worker_id)
            
            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –≤–æ—Ä–∫–µ—Ä
            account_data = {
                'id': account.id,
                'phone': phone,
                'api_id': api_id,
                'api_hash': api_hash
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –≤–æ—Ä–∫–µ—Ä —á–µ—Ä–µ–∑ Celery
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É add_account –Ω–∞ –≤–æ—Ä–∫–µ—Ä
                result = celery_app.send_task(
                    'worker.add_account',
                    args=[account_data],
                    kwargs={},
                    queue=worker.name,
                    expires=30
                )
                
                # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –±–æ–ª–µ–µ 5 —Å–µ–∫—É–Ω–¥
                task_result = result.get(timeout=5)
                
                if task_result and task_result.get('status') == 'success':
                    query.edit_message_text(
                        f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {phone} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –≤–æ—Ä–∫–µ—Ä—É {worker.name}.\n\n"
                        f"–°—Ç–∞—Ç—É—Å: {task_result.get('message', '–î–æ–±–∞–≤–ª–µ–Ω')}",
                        parse_mode=ParseMode.HTML
                    )
                else:
                    query.edit_message_text(
                        f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {phone} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –∫ –≤–æ—Ä–∫–µ—Ä—É {worker.name}.\n\n"
                        f"–û—à–∏–±–∫–∞: {task_result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                        parse_mode=ParseMode.HTML
                    )
            except Exception as e:
                query.edit_message_text(
                    f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {phone} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫ –≤–æ—Ä–∫–µ—Ä—É {worker.name}.\n\n"
                    f"–û—à–∏–±–∫–∞: {str(e)}",
                    parse_mode=ParseMode.HTML
                )
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
            query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}",
                parse_mode=ParseMode.HTML
            )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
        query.edit_message_text(
            "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            parse_mode=ParseMode.HTML
        )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    
    return WORKERS_MENU

def account_callback(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    query = update.callback_query
    query.answer()
    
    data = query.data.split(':')
    action = data[0]
    account_id = int(data[1]) if len(data) > 1 else None
    
    db = next(get_db())
    account = get_account(db, account_id)
    
    if action == "select_account":
        account = get_account(db, account_id)
        worker = get_worker(db, account.worker_id)
        
        if account:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ—Ä–∫–µ—Ä–∞ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Redis
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                current_time = int(time.time())
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ—Ä–∫–µ—Ä–∞ –≤ Redis
                worker_key = f"{WORKER_STATUS_KEY_PREFIX}{worker.name}"
                worker_last_seen_key = f"{WORKER_LAST_SEEN_KEY_PREFIX}{worker.name}"
                
                worker_data_raw = redis_client.get(worker_key)
                last_seen_raw = redis_client.get(worker_last_seen_key)
                
                worker_online = False
                
                if worker_data_raw and last_seen_raw:
                    last_seen = int(last_seen_raw)
                    worker_data = json.loads(worker_data_raw)
                    worker_status = worker_data.get('status', 'offline')
                    
                    # –í–æ—Ä–∫–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω, –µ—Å–ª–∏:
                    # 1. –û–±–Ω–æ–≤–ª—è–ª —Å—Ç–∞—Ç—É—Å –Ω–µ–¥–∞–≤–Ω–æ (–≤ —Ç–µ—á–µ–Ω–∏–µ WORKER_ONLINE_TIMEOUT —Å–µ–∫—É–Ω–¥)
                    # 2. –ò –µ–≥–æ —Å—Ç–∞—Ç—É—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —è–≤–Ω–æ –∫–∞–∫ 'offline'
                    if (current_time - last_seen <= WORKER_ONLINE_TIMEOUT) and worker_status != 'offline':
                        worker_online = True
                
                # –ï—Å–ª–∏ –≤–æ—Ä–∫–µ—Ä –Ω–µ –≤ —Å–µ—Ç–∏, –∞–∫–∫–∞—É–Ω—Ç —Ç–æ–∂–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–∫—Ç–∏–≤–µ–Ω
                if not worker_online and account.is_active:
                    update_account_status(db, account_id, False)
                    account.is_active = False
                
                worker_status = "üü¢ –û–Ω–ª–∞–π–Ω" if worker_online else "üî¥ –û—Ñ—Ñ–ª–∞–π–Ω"
                account_status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if account.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                
                query.edit_message_text(
                    f"–ê–∫–∫–∞—É–Ω—Ç: {account.phone}\n"
                    f"–í–æ—Ä–∫–µ—Ä: {worker.name} ({worker_status})\n"
                    f"–°—Ç–∞—Ç—É—Å: {account_status}",
                    reply_markup=get_account_control_keyboard(account_id)
                )
            except Exception as e:
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –∏–∑ –ë–î
                query.edit_message_text(
                    f"–ê–∫–∫–∞—É–Ω—Ç: {account.phone}\n"
                    f"–í–æ—Ä–∫–µ—Ä: {worker.name}\n"
                    f"–°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if account.is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
                    f"(–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {str(e)})",
                    reply_markup=get_account_control_keyboard(account_id)
                )
        else:
            query.edit_message_text(
                "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=None
            )
    
    elif action == "account_start":
        # –ó–∞–ø—É—Å–∫ –∞–∫–∫–∞—É–Ω—Ç–∞ —á–µ—Ä–µ–∑ Celery
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ—Ä–∫–µ—Ä–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
            current_time = int(time.time())
            worker_key = f"{WORKER_STATUS_KEY_PREFIX}{worker.name}"
            worker_last_seen_key = f"{WORKER_LAST_SEEN_KEY_PREFIX}{worker.name}"
            
            worker_data_raw = redis_client.get(worker_key)
            last_seen_raw = redis_client.get(worker_last_seen_key)
            
            worker_online = False
            if worker_data_raw and last_seen_raw:
                last_seen = int(last_seen_raw)
                worker_data = json.loads(worker_data_raw)
                
                if (current_time - last_seen <= WORKER_ONLINE_TIMEOUT) and worker_data.get('status') != 'offline':
                    worker_online = True
            
            if not worker_online:
                query.edit_message_text(
                    f"‚ö†Ô∏è –í–æ—Ä–∫–µ—Ä {worker.name} –Ω–µ –≤ —Å–µ—Ç–∏. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç {account.phone}.",
                    reply_markup=get_telethon_account_keyboard(account_id, worker.id),
                    parse_mode=ParseMode.HTML
                )
                return WORKERS_MENU
                
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ Celery
            result = celery_app.send_task(
                'worker.start_account',
                args=[account_id],
                kwargs={},
                queue=worker.name,
                expires=10
            )
            
            # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—É—Å–∫–∞ –Ω–µ –±–æ–ª–µ–µ 10 —Å–µ–∫—É–Ω–¥
            task_result = result.get(timeout=10)
            
            if task_result and task_result.get('status') == 'success':
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                update_account_status(db, account_id, True)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Redis –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
                redis_client.set(
                    f"account_status:{account_id}", 
                    json.dumps({
                        'status': 'active',
                        'is_connected': True,
                        'last_updated': int(time.time())
                    }),
                    ex=300  # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç
                )
                
                query.edit_message_text(
                    f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account.phone} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!\n\n"
                    f"–°—Ç–∞—Ç—É—Å: üü¢ –ê–∫—Ç–∏–≤–µ–Ω\n"
                    f"–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Telegram: ‚úÖ\n"
                    f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {time.strftime('%Y-%m-%d %H:%M:%S')}",
                    reply_markup=get_telethon_account_keyboard(account_id, worker.id),
                    parse_mode=ParseMode.HTML
                )
            else:
                query.edit_message_text(
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç {account.phone}.\n\n"
                    f"–û—à–∏–±–∫–∞: {task_result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                    reply_markup=get_telethon_account_keyboard(account_id, worker.id),
                    parse_mode=ParseMode.HTML
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}")
            query.edit_message_text(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {account.phone}.\n\n"
                f"–û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=get_telethon_account_keyboard(account_id, worker.id),
                parse_mode=ParseMode.HTML
            )
    
    elif action == "account_stop":
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ —á–µ—Ä–µ–∑ Celery
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ—Ä–∫–µ—Ä–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
            current_time = int(time.time())
            worker_key = f"{WORKER_STATUS_KEY_PREFIX}{worker.name}"
            worker_last_seen_key = f"{WORKER_LAST_SEEN_KEY_PREFIX}{worker.name}"
            
            worker_data_raw = redis_client.get(worker_key)
            last_seen_raw = redis_client.get(worker_last_seen_key)
            
            worker_online = False
            if worker_data_raw and last_seen_raw:
                last_seen = int(last_seen_raw)
                worker_data = json.loads(worker_data_raw)
                
                if (current_time - last_seen <= WORKER_ONLINE_TIMEOUT) and worker_data.get('status') != 'offline':
                    worker_online = True
            
            if not worker_online:
                # –ï—Å–ª–∏ –≤–æ—Ä–∫–µ—Ä –Ω–µ –≤ —Å–µ—Ç–∏, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                update_account_status(db, account_id, False)
                query.edit_message_text(
                    f"‚ö†Ô∏è –í–æ—Ä–∫–µ—Ä {worker.name} –Ω–µ –≤ —Å–µ—Ç–∏. –ê–∫–∫–∞—É–Ω—Ç {account.phone} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                    reply_markup=get_telethon_account_keyboard(account_id, worker.id),
                    parse_mode=ParseMode.HTML
                )
                return WORKERS_MENU
                
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ Celery
            result = celery_app.send_task(
                'worker.stop_account',
                args=[account_id],
                kwargs={},
                queue=worker.name,
                expires=10
            )
            
            # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ –±–æ–ª–µ–µ 10 —Å–µ–∫—É–Ω–¥
            task_result = result.get(timeout=10)
            
            if task_result and task_result.get('status') == 'success':
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                update_account_status(db, account_id, False)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Redis –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
                redis_client.set(
                    f"account_status:{account_id}", 
                    json.dumps({
                        'status': 'inactive',
                        'is_connected': False,
                        'last_updated': int(time.time())
                    }),
                    ex=300  # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç
                )
                
                query.edit_message_text(
                    f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account.phone} —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n"
                    f"–°—Ç–∞—Ç—É—Å: üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω\n"
                    f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {time.strftime('%Y-%m-%d %H:%M:%S')}",
                    reply_markup=get_telethon_account_keyboard(account_id, worker.id),
                    parse_mode=ParseMode.HTML
                )
            else:
                query.edit_message_text(
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç {account.phone}.\n\n"
                    f"–û—à–∏–±–∫–∞: {task_result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                    reply_markup=get_telethon_account_keyboard(account_id, worker.id),
                    parse_mode=ParseMode.HTML
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}")
            query.edit_message_text(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {account.phone}.\n\n"
                f"–û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=get_telethon_account_keyboard(account_id, worker.id),
                parse_mode=ParseMode.HTML
            )
    
    elif action == "account_status":
        # –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ —É –≤–æ—Ä–∫–µ—Ä–∞ —á–µ—Ä–µ–∑ Celery
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ—Ä–∫–µ—Ä–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
            current_time = int(time.time())
            worker_key = f"{WORKER_STATUS_KEY_PREFIX}{worker.name}"
            worker_last_seen_key = f"{WORKER_LAST_SEEN_KEY_PREFIX}{worker.name}"
            
            worker_data_raw = redis_client.get(worker_key)
            last_seen_raw = redis_client.get(worker_last_seen_key)
            
            worker_online = False
            if worker_data_raw and last_seen_raw:
                last_seen = int(last_seen_raw)
                worker_data = json.loads(worker_data_raw)
                
                if (current_time - last_seen <= WORKER_ONLINE_TIMEOUT) and worker_data.get('status') != 'offline':
                    worker_online = True
            
            if not worker_online:
                query.edit_message_text(
                    f"‚ö†Ô∏è –í–æ—Ä–∫–µ—Ä {worker.name} –Ω–µ –≤ —Å–µ—Ç–∏. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞ {account.phone}.",
                    reply_markup=get_telethon_account_keyboard(account_id, worker.id),
                    parse_mode=ParseMode.HTML
                )
                return WORKERS_MENU
            
            # –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ Celery
            result = check_account_status.delay(worker.name, account_id)
            status_data = result.get(timeout=5)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            is_active = status_data.get('status') == 'active'
            update_account_status(db, account_id, is_active)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            status_emoji = "üü¢" if is_active else "üî¥"
            connected_status = "‚úÖ" if status_data.get('is_connected', False) else "‚ùå"
            messages_count = status_data.get('messages_count', 0)
            has_session = "‚úÖ" if status_data.get('has_session', False) else "‚ùå"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            text = f"üì± <b>–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞ {account.phone}</b>\n\n"
            text += f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {'–ó–∞–ø—É—â–µ–Ω' if is_active else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
            text += f"<b>–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Telegram:</b> {connected_status}\n"
            text += f"<b>–°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:</b> {has_session}\n"
            text += f"<b>–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {messages_count}\n"
            text += f"<b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> {time.strftime('%Y-%m-%d %H:%M:%S')}\n"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            query.edit_message_text(
                text,
                reply_markup=get_telethon_account_keyboard(account_id, worker.id),
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}")
            query.edit_message_text(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ {account.phone}.\n\n"
                f"–û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=get_telethon_account_keyboard(account_id, worker.id),
                parse_mode=ParseMode.HTML
            )
    
    elif action == "account_delete":
        account = get_account(db, account_id)
        worker_id = account.worker_id
        
        # –£–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
        db_session = db  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç Session
        db_session.delete(account)
        db_session.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        worker = get_worker(db, worker_id)
        accounts = get_worker_accounts(db, worker_id)
        
        if accounts:
            text = f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account.phone} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.\n\n"
            text += f"–û—Å—Ç–∞–≤—à–∏–µ—Å—è –∞–∫–∫–∞—É–Ω—Ç—ã –≤–æ—Ä–∫–µ—Ä–∞ {worker.name}:\n\n"
            for i, acc in enumerate(accounts, 1):
                text += f"{i}. {acc.phone} - {'–ê–∫—Ç–∏–≤–µ–Ω' if acc.is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
            
            query.edit_message_text(
                text,
                reply_markup=get_account_selection_keyboard(accounts)
            )
        else:
            query.edit_message_text(
                f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account.phone} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.\n\n"
                f"–£ –≤–æ—Ä–∫–µ—Ä–∞ {worker.name} –±–æ–ª—å—à–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤.",
                reply_markup=get_worker_control_keyboard(worker_id)
            )
            return WORKERS_MENU
    
    return ACCOUNTS_MENU

def account_selection_callback(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"""
    query = update.callback_query
    query.answer()
    
    data = query.data
    account_id = int(data.split(":")[-1])
    
    db = next(get_db())
    account = get_account(db, account_id)
    
    if not account:
        query.edit_message_text(
            "‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=get_accounts_menu()
        )
        return ACCOUNTS_MENU
    
    worker = get_worker(db, account.worker_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –≤–æ—Ä–∫–µ—Ä
    current_time = int(time.time())
    worker_key = f"{WORKER_STATUS_KEY_PREFIX}{worker.name}"
    worker_last_seen_key = f"{WORKER_LAST_SEEN_KEY_PREFIX}{worker.name}"
    
    worker_data_raw = redis_client.get(worker_key)
    last_seen_raw = redis_client.get(worker_last_seen_key)
    
    worker_online = False
    if worker_data_raw and last_seen_raw:
        last_seen = int(last_seen_raw)
        worker_data = json.loads(worker_data_raw)
        
        if (current_time - last_seen <= WORKER_ONLINE_TIMEOUT) and worker_data.get('status') != 'offline':
            worker_online = True
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞
    status_emoji = "üü¢" if account.is_active else "üî¥"
    worker_status = "üü¢ –û–Ω–ª–∞–π–Ω" if worker_online else "üî¥ –û—Ñ—Ñ–ª–∞–π–Ω"
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞—Ç—É—Å–µ –∞–∫–∫–∞—É–Ω—Ç–∞, –µ—Å–ª–∏ –≤–æ—Ä–∫–µ—Ä –æ–Ω–ª–∞–π–Ω
    extra_status = ""
    if worker_online and account.is_active:
        try:
            result = check_account_status.delay(worker.name, account_id)
            status_data = result.get(timeout=5)
            
            connected = "‚úÖ" if status_data.get('is_connected', False) else "‚ùå"
            messages_count = status_data.get('messages_count', 0)
            
            extra_status += f"–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Telegram: {connected}\n"
            extra_status += f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_count}\n"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}")
            extra_status = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –∞–∫–∫–∞—É–Ω—Ç–∞.\n"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = f"üì± <b>–ê–∫–∫–∞—É–Ω—Ç {account.phone}</b>\n\n"
    text += f"<b>API ID:</b> {account.api_id}\n"
    text += f"<b>API Hash:</b> {account.api_hash[:5]}...{account.api_hash[-5:]}\n"
    text += f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {'–ó–∞–ø—É—â–µ–Ω' if account.is_active else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
    text += f"<b>–í–æ—Ä–∫–µ—Ä:</b> {worker.name} ({worker_status})\n"
    
    if extra_status:
        text += f"\n<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n{extra_status}"
    
    text += f"\n<b>–°–æ–∑–¥–∞–Ω:</b> {account.created_at.strftime('%Y-%m-%d %H:%M:%S')}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–º
    query.edit_message_text(
        text,
        reply_markup=get_telethon_account_keyboard(account.id, worker.id),
        parse_mode=ParseMode.HTML
    )
    
    return ACCOUNTS_MENU

def back_to_accounts_callback(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    query = update.callback_query
    query.answer()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    return accounts_menu(update, context)

def accounts_command(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /accounts –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    return accounts_menu(update, context) 