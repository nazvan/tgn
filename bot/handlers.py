from telegram import Update, ParseMode
from telegram.ext import CallbackContext, ConversationHandler
from sqlalchemy.orm import Session

from database.models import SessionLocal
from database.operations import (
    create_worker, get_all_workers, get_worker, update_worker_status,
    create_account, get_worker_accounts, get_account, update_account_status
)
from celery_app.tasks import (
    register_worker, check_worker_status, add_account_to_worker,
    start_account, stop_account, check_account_status, list_active_workers
)
from .keyboards import (
    get_main_menu, get_workers_menu, get_accounts_menu,
    get_worker_control_keyboard, get_account_control_keyboard,
    get_worker_selection_keyboard, get_account_selection_keyboard
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    MAIN_MENU, WORKERS_MENU, ACCOUNTS_MENU,
    ADD_ACCOUNT_PHONE, ADD_ACCOUNT_API_ID, ADD_ACCOUNT_API_HASH, ADD_ACCOUNT_WORKER
) = range(7)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_db():
    db = SessionLocal()
    try:
        return db
    finally:
        db.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥

def start(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    
    update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–∞–º–∏ –∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ Telethon!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=get_main_menu()
    )
    
    return MAIN_MENU

def main_menu(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    text = update.message.text
    
    if text == "üë• –í–æ—Ä–∫–µ—Ä—ã":
        update.message.reply_text(
            "–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–∞–º–∏:",
            reply_markup=get_workers_menu()
        )
        return WORKERS_MENU
    
    elif text == "üë§ –ê–∫–∫–∞—É–Ω—Ç—ã":
        update.message.reply_text(
            "–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏:",
            reply_markup=get_accounts_menu()
        )
        return ACCOUNTS_MENU
    
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        update.message.reply_text(
            "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
            reply_markup=get_main_menu()
        )
        return MAIN_MENU
    
    elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        update.message.reply_text(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.",
            reply_markup=get_main_menu()
        )
        return MAIN_MENU
    
    else:
        update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=get_main_menu()
        )
        return MAIN_MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–æ—Ä–∫–µ—Ä–æ–≤

def workers_menu(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –≤–æ—Ä–∫–µ—Ä–æ–≤"""
    text = update.message.text
    
    if text == "üìã –°–ø–∏—Å–æ–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è
        loading_message = update.message.reply_text(
            "–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤... ‚è≥"
        )
        
        db = get_db()
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_workers = get_all_workers(db)
        
        if not db_workers:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º reply –≤–º–µ—Å—Ç–æ edit_text, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            update.message.reply_text(
                "–°–ø–∏—Å–æ–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤ –ø—É—Å—Ç. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤–æ—Ä–∫–µ—Ä, —á—Ç–æ–±—ã –æ–Ω –ø–æ—è–≤–∏–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ.",
                reply_markup=get_workers_menu()
            )
            return WORKERS_MENU
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–æ—Ä–∫–µ—Ä—ã —á–µ—Ä–µ–∑ Redis/Celery
        try:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ Celery
            active_workers_result = list_active_workers.delay()
            active_workers_data = active_workers_result.get(timeout=10)
            
            active_worker_names = set()
            if active_workers_data and active_workers_data.get('status') == 'success':
                workers_list = active_workers_data.get('workers', [])
                active_worker_names = {worker.get('name') for worker in workers_list}
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤–æ—Ä–∫–µ—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Redis
            for worker in db_workers:
                is_active = worker.name in active_worker_names
                if worker.is_active != is_active:
                    update_worker_status(db, worker.id, is_active)
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –ª–æ–∫–∞–ª—å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –±–∞–∑–∞ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞
                    worker.is_active = is_active
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤
            updated_workers = get_all_workers(db)
            
            if not updated_workers:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º reply –≤–º–µ—Å—Ç–æ edit_text
                update.message.reply_text(
                    "–°–ø–∏—Å–æ–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤ –ø—É—Å—Ç. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤–æ—Ä–∫–µ—Ä, —á—Ç–æ–±—ã –æ–Ω –ø–æ—è–≤–∏–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ.",
                    reply_markup=get_workers_menu()
                )
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ –≤–æ—Ä–∫–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ Redis
                text = "–°–ø–∏—Å–æ–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤:\n\n"
                for i, worker in enumerate(updated_workers, 1):
                    online_status = "üü¢ –û–Ω–ª–∞–π–Ω" if worker.is_active else "üî¥ –û—Ñ—Ñ–ª–∞–π–Ω"
                    text += f"{i}. {worker.name} - {online_status}\n   –°–µ—Ä–≤–µ—Ä: {worker.server_address}\n\n"
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º reply –≤–º–µ—Å—Ç–æ edit_text
                update.message.reply_text(
                    text,
                    reply_markup=get_workers_menu()
                )
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å Celery/Redis –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –∏–∑ –ë–î
            text = "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –≤–æ—Ä–∫–µ—Ä–æ–≤. –û—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã:\n\n"
            for i, worker in enumerate(db_workers, 1):
                status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if worker.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                text += f"{i}. {worker.name} - {status}\n   –°–µ—Ä–≤–µ—Ä: {worker.server_address}\n\n"
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º reply –≤–º–µ—Å—Ç–æ edit_text
            update.message.reply_text(
                text,
                reply_markup=get_workers_menu()
            )
        
        return WORKERS_MENU
    
    elif text == "üîô –ù–∞–∑–∞–¥":
        update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_menu()
        )
        return MAIN_MENU
    
    else:
        update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=get_workers_menu()
        )
        return WORKERS_MENU

def worker_callback(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤–æ—Ä–∫–µ—Ä–æ–≤"""
    query = update.callback_query
    query.answer()
    
    data = query.data.split(':')
    action = data[0]
    worker_id = int(data[1]) if len(data) > 1 else None
    
    db = get_db()
    
    if action == "select_worker":
        worker = get_worker(db, worker_id)
        
        if worker:
            # –ü–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ—Ä–∫–µ—Ä–µ –ø—Ä–æ–≤–µ—Ä–∏–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ Celery
            try:
                status_result = check_worker_status.delay(worker.name)
                status_data = status_result.get(timeout=5)
                worker_status = status_data.get('status', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ—Ä–∫–µ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                is_active = worker_status == 'online'
                if worker.is_active != is_active:
                    update_worker_status(db, worker_id, is_active)
                    worker.is_active = is_active
                
                status_emoji = "üü¢ –û–Ω–ª–∞–π–Ω" if is_active else "üî¥ –û—Ñ—Ñ–ª–∞–π–Ω"
            except Exception:
                worker_status = "–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"
                status_emoji = "‚ùì –°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
            
            query.edit_message_text(
                f"–í–æ—Ä–∫–µ—Ä: {worker.name}\n"
                f"–ê–¥—Ä–µ—Å: {worker.server_address}\n"
                f"–°—Ç–∞—Ç—É—Å: {status_emoji}\n"
                f"–ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(worker.accounts)}",
                reply_markup=get_worker_control_keyboard(worker_id)
            )
        else:
            query.edit_message_text(
                "–í–æ—Ä–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=None
            )
    
    elif action == "worker_accounts":
        worker = get_worker(db, worker_id)
        accounts = get_worker_accounts(db, worker_id)
        
        if accounts:
            text = f"–ê–∫–∫–∞—É–Ω—Ç—ã –≤–æ—Ä–∫–µ—Ä–∞ {worker.name}:\n\n"
            for i, account in enumerate(accounts, 1):
                text += f"{i}. {account.phone} - {'–ê–∫—Ç–∏–≤–µ–Ω' if account.is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
            
            query.edit_message_text(
                text,
                reply_markup=get_account_selection_keyboard(accounts)
            )
        else:
            query.edit_message_text(
                f"–£ –≤–æ—Ä–∫–µ—Ä–∞ {worker.name} –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤.",
                reply_markup=get_worker_control_keyboard(worker_id)
            )
    
    elif action == "worker_status":
        worker = get_worker(db, worker_id)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–æ—Ä–∫–µ—Ä–∞
        try:
            result = check_worker_status.delay(worker.name)
            status = result.get(timeout=5)  # –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            
            status_text = status.get('status', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
            status_emoji = "üü¢ –û–Ω–ª–∞–π–Ω" if status_text == 'online' else "üî¥ –û—Ñ—Ñ–ª–∞–π–Ω"
            
            query.edit_message_text(
                f"–°—Ç–∞—Ç—É—Å –≤–æ—Ä–∫–µ—Ä–∞ {worker.name}:\n\n"
                f"–°—Ç–∞—Ç—É—Å: {status_emoji}\n",
                reply_markup=get_worker_control_keyboard(worker_id)
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ—Ä–∫–µ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            is_active = status_text == 'online'
            if worker.is_active != is_active:
                update_worker_status(db, worker_id, is_active)
        except Exception as e:
            query.edit_message_text(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–æ—Ä–∫–µ—Ä–∞ {worker.name}:\n"
                f"{str(e)}",
                reply_markup=get_worker_control_keyboard(worker_id)
            )
    
    elif action == "worker_activate":
        worker = update_worker_status(db, worker_id, True)
        
        query.edit_message_text(
            f"‚úÖ –í–æ—Ä–∫–µ—Ä {worker.name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
            f"–†–µ–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è.",
            reply_markup=get_worker_control_keyboard(worker_id)
        )
    
    elif action == "worker_deactivate":
        worker = update_worker_status(db, worker_id, False)
        
        query.edit_message_text(
            f"‚ùå –í–æ—Ä–∫–µ—Ä {worker.name} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=get_worker_control_keyboard(worker_id)
        )
    
    elif action == "back_to_main":
        query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:",
            reply_markup=None
        )
    
    return WORKERS_MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤

def accounts_menu(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    text = update.message.text
    
    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç":
        update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79123456789):"
        )
        return ADD_ACCOUNT_PHONE
    
    elif text == "üìã –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤":
        db = get_db()
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤ –∏ –∏—Ö –∞–∫–∫–∞—É–Ω—Ç—ã
        workers = get_all_workers(db, active_only=True)
        
        if not workers:
            update.message.reply_text(
                "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –≤–æ—Ä–∫–µ—Ä–∞.",
                reply_markup=get_accounts_menu()
            )
        else:
            text = "–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ –≤–æ—Ä–∫–µ—Ä–∞–º:\n\n"
            
            for worker in workers:
                text += f"–í–æ—Ä–∫–µ—Ä: {worker.name}\n"
                accounts = get_worker_accounts(db, worker.id)
                
                if accounts:
                    for i, account in enumerate(accounts, 1):
                        text += f"  {i}. {account.phone} - {'–ê–∫—Ç–∏–≤–µ–Ω' if account.is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
                else:
                    text += "  –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
                
                text += "\n"
            
            update.message.reply_text(
                text,
                reply_markup=get_accounts_menu()
            )
        
        return ACCOUNTS_MENU
    
    elif text == "üîô –ù–∞–∑–∞–¥":
        update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_menu()
        )
        return MAIN_MENU
    
    else:
        update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=get_accounts_menu()
        )
        return ACCOUNTS_MENU

def add_account_phone(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    phone = update.message.text
    context.user_data['account_phone'] = phone
    
    update.message.reply_text(
        f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ API ID –∞–∫–∫–∞—É–Ω—Ç–∞:"
    )
    
    return ADD_ACCOUNT_API_ID

def add_account_api_id(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ API ID –∞–∫–∫–∞—É–Ω—Ç–∞"""
    api_id = update.message.text
    context.user_data['account_api_id'] = api_id
    
    update.message.reply_text(
        f"API ID: {api_id}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ API Hash –∞–∫–∫–∞—É–Ω—Ç–∞:"
    )
    
    return ADD_ACCOUNT_API_HASH

def add_account_api_hash(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ API Hash –∞–∫–∫–∞—É–Ω—Ç–∞"""
    api_hash = update.message.text
    context.user_data['account_api_hash'] = api_hash
    
    db = get_db()
    workers = get_all_workers(db, active_only=True)
    
    if not workers:
        update.message.reply_text(
            "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –≤–æ—Ä–∫–µ—Ä–∞.",
            reply_markup=get_accounts_menu()
        )
        return ACCOUNTS_MENU
    
    keyboard = get_worker_selection_keyboard(workers)
    
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:",
        reply_markup=keyboard
    )
    
    return ADD_ACCOUNT_WORKER

def add_account_worker(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    query = update.callback_query
    query.answer()
    
    data = query.data.split(':')
    action = data[0]
    worker_id = int(data[1]) if len(data) > 1 else None
    
    if action != "select_worker":
        query.edit_message_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ—Ä–∫–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.",
            reply_markup=None
        )
        return ACCOUNTS_MENU
    
    phone = context.user_data.get('account_phone')
    api_id = context.user_data.get('account_api_id')
    api_hash = context.user_data.get('account_api_hash')
    
    db = get_db()
    worker = get_worker(db, worker_id)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    account = create_account(db, phone, api_id, api_hash, worker_id)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∫ –≤–æ—Ä–∫–µ—Ä—É
    account_data = {
        'id': account.id,
        'phone': phone,
        'api_id': api_id,
        'api_hash': api_hash
    }
    add_account_to_worker.delay(worker.name, account_data)
    
    query.edit_message_text(
        f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {phone} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –≤–æ—Ä–∫–µ—Ä—É {worker.name}!",
        reply_markup=None
    )
    
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    
    return ACCOUNTS_MENU

def account_callback(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    query = update.callback_query
    query.answer()
    
    data = query.data.split(':')
    action = data[0]
    account_id = int(data[1]) if len(data) > 1 else None
    
    db = get_db()
    
    if action == "select_account":
        account = get_account(db, account_id)
        worker = get_worker(db, account.worker_id)
        
        if account:
            query.edit_message_text(
                f"–ê–∫–∫–∞—É–Ω—Ç: {account.phone}\n"
                f"–í–æ—Ä–∫–µ—Ä: {worker.name}\n"
                f"–°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if account.is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}",
                reply_markup=get_account_control_keyboard(account_id)
            )
        else:
            query.edit_message_text(
                "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=None
            )
    
    elif action == "account_start":
        account = get_account(db, account_id)
        worker = get_worker(db, account.worker_id)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
        result = start_account.delay(worker.name, account_id)
        response = result.get(timeout=5)  # –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        
        if response.get('status') == 'success':
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            update_account_status(db, account_id, True)
            
            query.edit_message_text(
                f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account.phone} –∑–∞–ø—É—â–µ–Ω –Ω–∞ –≤–æ—Ä–∫–µ—Ä–µ {worker.name}.",
                reply_markup=get_account_control_keyboard(account_id)
            )
        else:
            query.edit_message_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç {account.phone}: {response.get('message')}",
                reply_markup=get_account_control_keyboard(account_id)
            )
    
    elif action == "account_stop":
        account = get_account(db, account_id)
        worker = get_worker(db, account.worker_id)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
        result = stop_account.delay(worker.name, account_id)
        response = result.get(timeout=5)  # –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        
        if response.get('status') == 'success':
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            update_account_status(db, account_id, False)
            
            query.edit_message_text(
                f"‚èπÔ∏è –ê–∫–∫–∞—É–Ω—Ç {account.phone} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –≤–æ—Ä–∫–µ—Ä–µ {worker.name}.",
                reply_markup=get_account_control_keyboard(account_id)
            )
        else:
            query.edit_message_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç {account.phone}: {response.get('message')}",
                reply_markup=get_account_control_keyboard(account_id)
            )
    
    elif action == "account_status":
        account = get_account(db, account_id)
        worker = get_worker(db, account.worker_id)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
        result = check_account_status.delay(worker.name, account_id)
        status = result.get(timeout=5)  # –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        
        query.edit_message_text(
            f"–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞ {account.phone}:\n\n"
            f"–°—Ç–∞—Ç—É—Å: {status.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n",
            reply_markup=get_account_control_keyboard(account_id)
        )
    
    elif action == "account_delete":
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
        query.edit_message_text(
            "–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.",
            reply_markup=None
        )
    
    return ACCOUNTS_MENU 