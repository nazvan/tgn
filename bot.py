import os
import asyncio
import logging
import mimetypes
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from config import BOT_TOKEN, MODERATOR_IDS, TARGET_CHANNEL
from database import get_session, News, init_db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class ReviewStates(StatesGroup):
    waiting_for_review = State()
    waiting_for_edit_text = State()


@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if message.from_user.id not in MODERATOR_IDS:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–æ–≤.\n\n"
        "–Ø –±—É–¥—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º –Ω–æ–≤–æ—Å—Ç–∏, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö. "
        "–í—ã —Å–º–æ–∂–µ—Ç–µ —Å—Ä–∞–∑—É –æ–¥–æ–±—Ä–∏—Ç—å –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö."
    )


@dp.message_handler(commands=['help'])
async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    if message.from_user.id not in MODERATOR_IDS:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    await message.reply(
        "ü§ñ <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        "–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å—ã–ª–∞—é –≤–∞–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n\n"
        "<b>–î–µ–π—Å—Ç–≤–∏—è —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏:</b>\n"
        "‚úÖ <i>–û–¥–æ–±—Ä–∏—Ç—å</i> - –ù–æ–≤–æ—Å—Ç—å –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª\n"
        "‚úèÔ∏è <i>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</i> - –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π\n"
        "‚úèÔ∏è <i>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—É—é)</i> - –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏\n"
        "üîÑ <i>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª</i> - –í–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é\n"
        "üóëÔ∏è <i>–£–¥–∞–ª–∏—Ç—å</i> - –£–¥–∞–ª–∏—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å –∏–∑ –∫–∞–Ω–∞–ª–∞ (–æ–Ω–∞ –≤–µ—Ä–Ω–µ—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é)\n\n"
        "–ù–æ–≤–æ—Å—Ç–∏ –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –≤ –∫–∞–Ω–∞–ª <b>{}</b>".format(TARGET_CHANNEL),
        parse_mode="HTML"
    )


@dp.message_handler(commands=['stats'])
async def cmd_stats(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    if message.from_user.id not in MODERATOR_IDS:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    session = get_session()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_news = session.query(News).count()
    published_news = session.query(News).filter(News.is_published == True).count()
    pending_news = session.query(News).filter(News.is_published == False).count()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    stats_message = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b>\n\n"
        f"–í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: <b>{total_news}</b>\n"
        f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: <b>{published_news}</b>\n"
        f"–û–∂–∏–¥–∞–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: <b>{pending_news}</b>\n"
    )
    
    await message.reply(stats_message, parse_mode="HTML")


@dp.callback_query_handler(lambda c: c.data.startswith('edit_'))
async def process_edit_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"""
    user_id = callback_query.from_user.id
    if user_id not in MODERATOR_IDS:
        await bot.answer_callback_query(callback_query.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ callback_data
    callback_data = callback_query.data
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –∏–ª–∏ –µ—â–µ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π
    is_published_edit = False
    if callback_data.startswith('edit_published_'):
        news_id = int(callback_data.split('_')[2])
        is_published_edit = True
    else:
        news_id = int(callback_data.split('_')[1])
    
    session = get_session()
    news = session.query(News).filter(News.id == news_id).first()
    
    if not news:
        await bot.answer_callback_query(callback_query.id, "–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ—Å—Ç–∏, —Ñ–ª–∞–≥ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        news_id=news_id, 
        is_published_edit=is_published_edit,
        original_message_id=callback_query.message.message_id,
        original_chat_id=callback_query.message.chat.id
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    await ReviewStates.waiting_for_edit_text.set()
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await bot.answer_callback_query(callback_query.id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    edit_type = "–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π " if is_published_edit else ""
    request_msg = await bot.send_message(
        callback_query.from_user.id,
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è {edit_type}–Ω–æ–≤–æ—Å—Ç–∏ ‚Ññ{news_id}.\n\n–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:\n\n{news.content}",
        parse_mode="HTML"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    await state.update_data(request_message_id=request_msg.message_id)


@dp.callback_query_handler(lambda c: c.data.startswith('restore_original_'))
async def process_restore_original(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–æ–≤–æ—Å—Ç–∏"""
    user_id = callback_query.from_user.id
    if user_id not in MODERATOR_IDS:
        await bot.answer_callback_query(callback_query.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ callback_data
    news_id = int(callback_query.data.split('_')[2])
    
    session = get_session()
    news = session.query(News).filter(News.id == news_id).first()
    
    if not news:
        await bot.answer_callback_query(callback_query.id, "–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    if not news.original_content:
        await bot.answer_callback_query(callback_query.id, "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è
    old_content = news.content
    original_content = news.original_content
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
    news.content = original_content
    session.commit()
    
    await bot.answer_callback_query(callback_query.id, "–¢–µ–∫—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ.")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–µ –∏–ª–∏ –Ω–µ—Ç)
    is_published = news.is_published and news.published_message_id
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Ü–µ–ª–µ–≤–æ–º –∫–∞–Ω–∞–ª–µ, –µ—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç—å –±—ã–ª–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞
    if is_published:
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞
            target_channel = TARGET_CHANNEL
            if target_channel and not target_channel.startswith('@') and not target_channel.startswith('-'):
                if not target_channel.isdigit():  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ–≤–æ–π ID
                    target_channel = f'@{target_channel}'  # –î–æ–±–∞–≤–ª—è–µ–º @ –µ—Å–ª–∏ —ç—Ç–æ username –±–µ–∑ @
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
            if news.has_media and news.media_path and os.path.exists(news.media_path):
                # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç—å
                with open(news.media_path, 'rb') as file:
                    file_content = file.read()
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞
                if news.media_type == 'photo':
                    await bot.edit_message_media(
                        chat_id=target_channel,
                        message_id=news.published_message_id,
                        media=types.InputMediaPhoto(
                            media=file_content,
                            caption=news.content
                        )
                    )
                else:  # document
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
                    mime_type = mimetypes.guess_type(news.media_path)[0]
                    
                    # –ï—Å–ª–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    if mime_type and mime_type.startswith('image/'):
                        await bot.edit_message_media(
                            chat_id=target_channel,
                            message_id=news.published_message_id,
                            media=types.InputMediaPhoto(
                                media=file_content,
                                caption=news.content
                            )
                        )
                    else:
                        await bot.edit_message_media(
                            chat_id=target_channel,
                            message_id=news.published_message_id,
                            media=types.InputMediaDocument(
                                media=file_content,
                                caption=news.content
                            )
                        )
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await bot.edit_message_text(
                    chat_id=target_channel,
                    message_id=news.published_message_id,
                    text=news.content
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏: {e}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    success_message = f"‚úÖ –¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ ‚Ññ{news_id} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ{' –∏ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ' if is_published else ''}."
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –Ω–æ–≤–æ—Å—Ç–∏
    if is_published:
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(
            InlineKeyboardButton("–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ", callback_data=f"dummy_{news_id}"),
            InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_published_{news_id}"),
            InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{news_id}")
        )
    else:
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(
            InlineKeyboardButton("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"approve_{news_id}"),
            InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{news_id}")
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ
    if news.content != news.original_content:
        markup.add(InlineKeyboardButton("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª", callback_data=f"restore_original_{news_id}"))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    message_text = (
        f"üì¢ <b>–ù–æ–≤–æ—Å—Ç—å ‚Ññ{news.id}</b> –∏–∑ –∫–∞–Ω–∞–ª–∞ <b>{news.source_channel}</b> "
        f"(–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª):\n\n{news.content}\n\n{success_message}"
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ—Å—Ç—å—é —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if news.has_media and news.media_path and os.path.exists(news.media_path):
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç—å
            with open(news.media_path, 'rb') as file:
                file_content = file.read()
            
            mime_type = mimetypes.guess_type(news.media_path)[0]
            
            # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ
            if news.media_type == 'photo' or (mime_type and mime_type.startswith('image/')):
                await bot.edit_message_media(
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    media=types.InputMediaPhoto(
                        media=file_content,
                        caption=message_text,
                        parse_mode="HTML"
                    ),
                    reply_markup=markup
                )
            else:
                # –ò–Ω–∞—á–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
                await bot.edit_message_media(
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    media=types.InputMediaDocument(
                        media=file_content,
                        caption=message_text,
                        parse_mode="HTML"
                    ),
                    reply_markup=markup
                )
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text=message_text,
                parse_mode="HTML",
                reply_markup=markup
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤–æ—Å—Ç—å—é –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—ã—Ç–∞–µ–º—Å—è —Ö–æ—Ç—è –±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏
        try:
            await bot.edit_message_reply_markup(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                reply_markup=markup
            )
        except Exception as e2:
            logger.error(f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫: {e2}")


@dp.message_handler(state=ReviewStates.waiting_for_edit_text)
async def process_edit_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏"""
    user_id = message.from_user.id
    if user_id not in MODERATOR_IDS:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    news_id = data.get('news_id')
    is_published_edit = data.get('is_published_edit', False)
    original_message_id = data.get('original_message_id')
    original_chat_id = data.get('original_chat_id')
    request_message_id = data.get('request_message_id')
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    session = get_session()
    news = session.query(News).filter(News.id == news_id).first()
    
    if not news:
        await message.reply("–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.finish()
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏
    old_content = news.content
    news.content = message.text
    session.commit()
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    success_message = (
        f"‚úÖ –¢–µ–∫—Å—Ç {'–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π ' if is_published_edit else ''}–Ω–æ–≤–æ—Å—Ç–∏ ‚Ññ{news_id} "
        f"—É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω{' –≤ –∫–∞–Ω–∞–ª–µ' if is_published_edit and news.is_published else ''}."
    )
    
    # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏
    if is_published_edit and news.is_published and news.published_message_id:
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞
            target_channel = TARGET_CHANNEL
            if target_channel and not target_channel.startswith('@') and not target_channel.startswith('-'):
                if not target_channel.isdigit():  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ–≤–æ–π ID
                    target_channel = f'@{target_channel}'  # –î–æ–±–∞–≤–ª—è–µ–º @ –µ—Å–ª–∏ —ç—Ç–æ username –±–µ–∑ @
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
            if news.has_media and news.media_path and os.path.exists(news.media_path):
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏ {news.id} —Å –º–µ–¥–∏–∞")
                
                # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç—å
                with open(news.media_path, 'rb') as file:
                    file_content = file.read()
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞
                if news.media_type == 'photo':
                    await bot.edit_message_media(
                        chat_id=target_channel,
                        message_id=news.published_message_id,
                        media=types.InputMediaPhoto(
                            media=file_content,
                            caption=news.content
                        )
                    )
                else:  # document
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
                    mime_type = mimetypes.guess_type(news.media_path)[0]
                    
                    # –ï—Å–ª–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    if mime_type and mime_type.startswith('image/'):
                        await bot.edit_message_media(
                            chat_id=target_channel,
                            message_id=news.published_message_id,
                            media=types.InputMediaPhoto(
                                media=file_content,
                                caption=news.content
                            )
                        )
                    else:
                        await bot.edit_message_media(
                            chat_id=target_channel,
                            message_id=news.published_message_id,
                            media=types.InputMediaDocument(
                                media=file_content,
                                caption=news.content
                            )
                        )
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await bot.edit_message_text(
                    chat_id=target_channel,
                    message_id=news.published_message_id,
                    text=news.content
                )
            
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏
            markup = InlineKeyboardMarkup(row_width=2)
            markup.add(
                InlineKeyboardButton("–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ", callback_data=f"dummy_{news_id}"),
                InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_published_{news_id}"),
                InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{news_id}")
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏: {e}")
            success_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏: {e}"
            markup = InlineKeyboardMarkup(row_width=2)
            markup.add(
                InlineKeyboardButton("–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ", callback_data=f"dummy_{news_id}"),
                InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_published_{news_id}"),
                InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{news_id}")
            )
    else:
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(
            InlineKeyboardButton("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"approve_{news_id}"),
            InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{news_id}")
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ
    if news.content != news.original_content:
        markup.add(InlineKeyboardButton("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª", callback_data=f"restore_original_{news_id}"))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    message_text = (
        f"üì¢ <b>–ù–æ–≤–æ—Å—Ç—å ‚Ññ{news.id}</b> –∏–∑ –∫–∞–Ω–∞–ª–∞ <b>{news.source_channel}</b> (–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞):\n\n"
        f"{news.content}\n\n"
        f"{success_message}"
    )
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if news.has_media and news.media_path and os.path.exists(news.media_path):
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏ {news.id} —Å –º–µ–¥–∏–∞")
            
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç—å
            with open(news.media_path, 'rb') as file:
                file_content = file.read()
            
            mime_type = mimetypes.guess_type(news.media_path)[0]
            
            # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ
            if news.media_type == 'photo' or (mime_type and mime_type.startswith('image/')):
                await bot.edit_message_media(
                    chat_id=original_chat_id,
                    message_id=original_message_id,
                    media=types.InputMediaPhoto(
                        media=file_content,
                        caption=message_text,
                        parse_mode="HTML"
                    ),
                    reply_markup=markup
                )
            else:
                # –ò–Ω–∞—á–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
                await bot.edit_message_media(
                    chat_id=original_chat_id,
                    message_id=original_message_id,
                    media=types.InputMediaDocument(
                        media=file_content,
                        caption=message_text,
                        parse_mode="HTML"
                    ),
                    reply_markup=markup
                )
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await bot.edit_message_text(
                chat_id=original_chat_id,
                message_id=original_message_id,
                text=message_text,
                parse_mode="HTML",
                reply_markup=markup
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤–æ—Å—Ç—å—é: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—ã—Ç–∞–µ–º—Å—è —Ö–æ—Ç—è –±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏
        try:
            await bot.edit_message_reply_markup(
                chat_id=original_chat_id,
                message_id=original_message_id,
                reply_markup=markup
            )
        except Exception as e2:
            logger.error(f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫: {e2}")
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º
    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–∑–∞–ø—Ä–æ—Å –æ—Ç –±–æ—Ç–∞
    if request_message_id:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=request_message_id)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ-–∑–∞–ø—Ä–æ—Å: {e}")


@dp.callback_query_handler(lambda c: c.data.startswith(('approve_', 'delete_', 'dummy_')))
async def process_review_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–µ—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è"""
    user_id = callback_query.from_user.id
    if user_id not in MODERATOR_IDS:
        await bot.answer_callback_query(callback_query.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    parts = callback_query.data.split('_')
    action = parts[0]
    news_id = int(parts[1])
    
    session = get_session()
    news = session.query(News).filter(News.id == news_id).first()
    
    if not news:
        await bot.answer_callback_query(callback_query.id, "–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    if action == 'approve':
        # –û–¥–æ–±—Ä—è–µ–º –∏ –ø—É–±–ª–∏–∫—É–µ–º –Ω–æ–≤–æ—Å—Ç—å
        news.is_reviewed = True
        news.is_approved = True
        session.commit()
        
        await bot.answer_callback_query(callback_query.id, "–ù–æ–≤–æ—Å—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è...")
        
        # –ü—É–±–ª–∏–∫—É–µ–º –Ω–æ–≤–æ—Å—Ç—å
        try:
            published_msg = await publish_news(news)
            if published_msg:
                news.is_published = True
                news.published_message_id = published_msg.message_id
                session.commit()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
                markup = InlineKeyboardMarkup(row_width=2)
                markup.add(
                    InlineKeyboardButton("–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ", callback_data=f"dummy_{news.id}"),
                    InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_published_{news.id}"),
                    InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{news.id}")
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ
                if news.content != news.original_content:
                    markup.add(InlineKeyboardButton("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª", callback_data=f"restore_original_{news.id}"))
                
                await bot.edit_message_reply_markup(
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    reply_markup=markup
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏ {news.id}: {e}")
            await bot.answer_callback_query(callback_query.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–æ–≤–æ—Å—Ç–∏
            news.is_reviewed = False
            news.is_approved = False
            session.commit()
            
    elif action == 'delete':
        # –£–¥–∞–ª—è–µ–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å –∏–∑ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        if news.is_published and news.published_message_id:
            try:
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞
                target_channel = TARGET_CHANNEL
                if target_channel and not target_channel.startswith('@') and not target_channel.startswith('-'):
                    if not target_channel.isdigit():  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ–≤–æ–π ID
                        target_channel = f'@{target_channel}'  # –î–æ–±–∞–≤–ª—è–µ–º @ –µ—Å–ª–∏ —ç—Ç–æ username –±–µ–∑ @
                
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
                await bot.delete_message(
                    chat_id=target_channel,
                    message_id=news.published_message_id
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                news.is_published = False
                news.published_message_id = None
                news.is_reviewed = False
                news.is_approved = False
                session.commit()
                
                await bot.answer_callback_query(callback_query.id, "–ù–æ–≤–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é.")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                markup = InlineKeyboardMarkup(row_width=2)
                markup.add(
                    InlineKeyboardButton("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"approve_{news.id}"),
                    InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{news.id}")
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ
                if news.content != news.original_content:
                    markup.add(InlineKeyboardButton("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª", callback_data=f"restore_original_{news.id}"))
                
                await bot.edit_message_reply_markup(
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    reply_markup=markup
                )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞: {e}")
                await bot.answer_callback_query(callback_query.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
        else:
            await bot.answer_callback_query(callback_query.id, "–≠—Ç–∞ –Ω–æ–≤–æ—Å—Ç—å –Ω–µ –±—ã–ª–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞.")
    
    elif action == 'dummy':
        # –î–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫, –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        await bot.answer_callback_query(callback_query.id)


@dp.callback_query_handler(lambda c: c.data.startswith('dummy_'))
async def process_dummy_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏"""
    await bot.answer_callback_query(callback_query.id, "–î–µ–π—Å—Ç–≤–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")


async def publish_news(news):
    """–ü—É–±–ª–∏–∫—É–µ—Ç –Ω–æ–≤–æ—Å—Ç—å –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ –±–æ—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞, –µ—Å–ª–∏ —ç—Ç–æ username
        target_channel = TARGET_CHANNEL
        if target_channel and not target_channel.startswith('@') and not target_channel.startswith('-'):
            if not target_channel.isdigit():  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ–≤–æ–π ID
                target_channel = f'@{target_channel}'  # –î–æ–±–∞–≤–ª—è–µ–º @ –µ—Å–ª–∏ —ç—Ç–æ username –±–µ–∑ @
        
        if news.has_media and news.media_path and os.path.exists(news.media_path):
            logger.info(f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–∏ {news.id} —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–º {news.media_path} –≤ –∫–∞–Ω–∞–ª {target_channel}")
            
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç—å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            with open(news.media_path, 'rb') as file:
                file_content = file.read()
            
            logger.info(f"–§–∞–π–ª {news.media_path} –ø—Ä–æ—á–∏—Ç–∞–Ω –≤ –ø–∞–º—è—Ç—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, —Ä–∞–∑–º–µ—Ä: {len(file_content)} –±–∞–π—Ç")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
            if news.media_type == 'photo':
                return await bot.send_photo(
                    chat_id=target_channel,
                    photo=file_content,
                    caption=news.content
                )
            elif news.media_type == 'document':
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
                mime_type = mimetypes.guess_type(news.media_path)[0]
                
                # –ï—Å–ª–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if mime_type and mime_type.startswith('image/'):
                    return await bot.send_photo(
                        chat_id=target_channel,
                        photo=file_content,
                        caption=news.content
                    )
                else:
                    return await bot.send_document(
                        chat_id=target_channel,
                        document=file_content,
                        caption=news.content
                    )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
            logger.info(f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏ {news.id} –≤ –∫–∞–Ω–∞–ª {target_channel}")
            return await bot.send_message(
                chat_id=target_channel,
                text=news.content
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏ {news.id}: {e}")
        raise


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –±–æ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞, –µ—Å–ª–∏ —ç—Ç–æ username
        target_channel = TARGET_CHANNEL
        if target_channel and not target_channel.startswith('@') and not target_channel.startswith('-'):
            if not target_channel.isdigit():  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ–≤–æ–π ID
                target_channel = f'@{target_channel}'  # –î–æ–±–∞–≤–ª—è–µ–º @ –µ—Å–ª–∏ —ç—Ç–æ username –±–µ–∑ @
        
        chat_info = await bot.get_chat(target_channel)
        logger.info(f"–ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–∞–Ω–∞–ª—É: {chat_info.title}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
        bot_member = await bot.get_chat_member(target_channel, (await bot.get_me()).id)
        if bot_member.is_chat_admin():
            logger.info("–ë–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
        else:
            logger.warning("–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª–µ! –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É: {e}")
        logger.warning("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∏ –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞.")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling()


if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    finally:
        loop.close() 