import os
import asyncio
import json
from telethon import TelegramClient, events
from telethon.tl.types import MessageMediaPhoto, MessageMediaDocument, MessageMediaWebPage
import logging
from datetime import datetime
import aiohttp
import mimetypes

from config import API_ID, API_HASH, PHONE_NUMBER, SOURCE_CHANNELS, BOT_TOKEN, MODERATOR_IDS
from database import get_session, News, init_db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞
MEDIA_DIR = os.path.join(os.getcwd(), 'media')
os.makedirs(MEDIA_DIR, exist_ok=True)


class NewsParser:
    def __init__(self):
        self.client = None
        self.session = get_session()

    async def start(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telethon, –∏—Å–ø–æ–ª—å–∑—É—è —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
        self.client = TelegramClient('parser_session', API_ID, API_HASH)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–¥–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é)
        await self.client.connect()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        if not await self.client.is_user_authorized():
            logger.error("–ü–∞—Ä—Å–µ—Ä –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ main.py –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
            return
        
        logger.info("–ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")

        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö
        @self.client.on(events.NewMessage(chats=SOURCE_CHANNELS))
        async def new_message_handler(event):
            await self.process_message(event)

        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞
        await self.client.run_until_disconnected()

    async def process_message(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        message = event.message
        chat = await event.get_chat()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        content = message.text or message.message or ""
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat.username or chat.id}: {content[:50]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ–¥–∏–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        has_media = message.media is not None
        media_path = None
        media_type = None
        
        if has_media:
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞ —Ç–∏–ø–∞: {type(message.media).__name__}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞
            if isinstance(message.media, MessageMediaPhoto):
                media_type = 'photo'
                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                media_path = os.path.join(MEDIA_DIR, f'photo_{message.id}_{timestamp}.jpg')
                try:
                    await self.client.download_media(message, media_path)
                    logger.info(f"–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {media_path}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –∏ –µ–≥–æ —Ä–∞–∑–º–µ—Ä
                    if os.path.exists(media_path):
                        file_size = os.path.getsize(media_path)
                        logger.info(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
                    else:
                        logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {media_path}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
                    media_path = None
            
            elif isinstance(message.media, MessageMediaDocument):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
                document = message.media.document
                mime_type = document.mime_type
                file_name = None
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                for attribute in document.attributes:
                    if hasattr(attribute, 'file_name') and attribute.file_name:
                        file_name = attribute.file_name
                        break
                
                if not file_name:
                    # –ï—Å–ª–∏ –∏–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ mime-—Ç–∏–ø–∞
                    ext = mimetypes.guess_extension(mime_type) or '.dat'
                    file_name = f'doc_{message.id}_{datetime.now().strftime("%Y%m%d_%H%M%S")}{ext}'
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                media_type = 'document'
                media_path = os.path.join(MEDIA_DIR, file_name)
                try:
                    await self.client.download_media(message, media_path)
                    logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {media_path}, MIME: {mime_type}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –∏ –µ–≥–æ —Ä–∞–∑–º–µ—Ä
                    if os.path.exists(media_path):
                        file_size = os.path.getsize(media_path)
                        logger.info(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
                    else:
                        logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {media_path}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
                    media_path = None
            
            elif isinstance(message.media, MessageMediaWebPage):
                # –î–ª—è –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–æ—Å—Ç–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–æ –Ω–µ —Å–∫–∞—á–∏–≤–∞–µ–º
                logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É, –º–µ–¥–∏–∞—Ñ–∞–π–ª –Ω–µ –±—É–¥–µ—Ç —Å–∫–∞—á–∞–Ω")
                has_media = False
            
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–µ–¥–∏–∞: {type(message.media).__name__}, —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–æ")
                has_media = False
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç–æ–µ (–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏ –º–µ–¥–∏–∞), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
        if not content and not has_media:
            logger.info("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –º–µ–¥–∏–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        news = News(
            source_channel=chat.username or str(chat.id),
            message_id=message.id,
            content=content,
            has_media=has_media,
            media_type=media_type,
            media_path=media_path
        )
        
        self.session.add(news)
        self.session.commit()
        
        logger.info(f"–ù–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞ {chat.username or chat.id}, ID: {news.id}, has_media: {has_media}, media_path: {media_path}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –≤—Å–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º —á–µ—Ä–µ–∑ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞
        await self.notify_moderators_about_new_news(news)

    async def notify_moderators_about_new_news(self, news):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏"""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞
            for moderator_id in MODERATOR_IDS:
                # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
                inline_keyboard = {
                    "inline_keyboard": [
                        [
                            {"text": "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", "callback_data": f"approve_{news.id}"},
                            {"text": "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "callback_data": f"edit_{news.id}"}
                        ]
                    ]
                }
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message_text = f"üì¢ <b>–ù–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å ‚Ññ{news.id}</b> –∏–∑ –∫–∞–Ω–∞–ª–∞ <b>{news.source_channel}</b>:\n\n{news.content}"
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –º–µ–¥–∏–∞
                if news.has_media and news.media_path and os.path.exists(news.media_path):
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏ {news.id} —Å –º–µ–¥–∏–∞ {news.media_path} –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É {moderator_id}")
                    await self.send_media_to_moderator(moderator_id, news, message_text, inline_keyboard)
                else:
                    # –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏ {news.id} –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É {moderator_id}")
                    await self.send_text_to_moderator(moderator_id, message_text, inline_keyboard)
                
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏ {news.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É {moderator_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏: {e}")

    async def send_text_to_moderator(self, moderator_id, text, inline_keyboard):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞"""
        bot_api_url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        
        payload = {
            "chat_id": moderator_id,
            "text": text,
            "parse_mode": "HTML",
            "reply_markup": json.dumps(inline_keyboard)
        }
        
        async with aiohttp.ClientSession() as session:
            try:
                async with session.post(bot_api_url, json=payload) as response:
                    if response.status != 200:
                        response_text = await response.text()
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {response_text}")
                    else:
                        logger.info(f"–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É {moderator_id}")
            except Exception as e:
                logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def send_media_to_moderator(self, moderator_id, news, caption, inline_keyboard):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞"""
        if news.media_type == 'photo':
            bot_api_url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendPhoto"
            file_param = "photo"
        else:  # document
            bot_api_url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendDocument"
            file_param = "document"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        if not os.path.exists(news.media_path):
            logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π: {news.media_path}")
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await self.send_text_to_moderator(
                moderator_id, 
                f"{caption}\n\n‚ö†Ô∏è <i>–ú–µ–¥–∏–∞—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑–∞–Ω —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç</i>", 
                inline_keyboard
            )
            return
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç—å
            with open(news.media_path, 'rb') as file:
                file_content = file.read()
                
            filename = os.path.basename(news.media_path)
            content_type = mimetypes.guess_type(news.media_path)[0] or 'application/octet-stream'
            logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {filename}, —Ç–∏–ø: {content_type}, —Ä–∞–∑–º–µ—Ä: {len(file_content)} –±–∞–π—Ç")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã —Å —É–∂–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º —Ñ–∞–π–ª–∞
            data = aiohttp.FormData()
            data.add_field('chat_id', str(moderator_id))
            data.add_field('caption', caption)
            data.add_field('parse_mode', 'HTML')
            data.add_field('reply_markup', json.dumps(inline_keyboard))
            data.add_field(
                file_param, 
                file_content, 
                filename=filename,
                content_type=content_type
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            async with aiohttp.ClientSession() as session:
                async with session.post(bot_api_url, data=data) as response:
                    if response.status != 200:
                        response_text = await response.text()
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞: {response_text}")
                        
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã —Ç–µ–∫—Å—Ç
                        await self.send_text_to_moderator(
                            moderator_id, 
                            f"{caption}\n\n‚ö†Ô∏è <i>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª: {response_text}</i>", 
                            inline_keyboard
                        )
                    else:
                        logger.info(f"–ú–µ–¥–∏–∞—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É {moderator_id}")
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞: {e}")
            # –ü—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–æ—Ç—è –±—ã —Ç–µ–∫—Å—Ç
            await self.send_text_to_moderator(
                moderator_id, 
                f"{caption}\n\n‚ö†Ô∏è <i>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞: {str(e)}</i>", 
                inline_keyboard
            )


async def run_parser():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞
    parser = NewsParser()
    await parser.start()


if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(run_parser())
    except KeyboardInterrupt:
        print("–ü–∞—Ä—Å–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    finally:
        loop.close() 