import os
import asyncio
import json
from telethon import TelegramClient, events
from telethon.tl.types import MessageMediaPhoto, MessageMediaDocument
import logging
from datetime import datetime
import aiohttp

from config import API_ID, API_HASH, PHONE_NUMBER, SOURCE_CHANNELS, BOT_TOKEN, MODERATOR_IDS
from database import get_session, News, init_db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞
MEDIA_DIR = os.path.join(os.getcwd(), 'media')
os.makedirs(MEDIA_DIR, exist_ok=True)


class NewsParser:
    def __init__(self):
        self.client = None
        self.session = get_session()

    async def start(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telethon, –∏—Å–ø–æ–ª—å–∑—É—è —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
        self.client = TelegramClient('parser_session', API_ID, API_HASH)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–¥–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é)
        await self.client.connect()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        if not await self.client.is_user_authorized():
            logger.error("–ü–∞—Ä—Å–µ—Ä –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ main.py –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
            return
        
        logger.info("–ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")

        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö
        @self.client.on(events.NewMessage(chats=SOURCE_CHANNELS))
        async def new_message_handler(event):
            await self.process_message(event)

        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞
        await self.client.run_until_disconnected()

    async def process_message(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        message = event.message
        chat = await event.get_chat()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        content = message.text or message.message or ""
        if not content and not message.media:
            return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –º–µ–¥–∏–∞
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ–¥–∏–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        has_media = message.media is not None
        media_path = None
        media_type = None
        
        if has_media:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞
            if isinstance(message.media, MessageMediaPhoto):
                media_type = 'photo'
                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                media_path = os.path.join(MEDIA_DIR, f'photo_{message.id}_{timestamp}.jpg')
                await self.client.download_media(message, media_path)
            elif isinstance(message.media, MessageMediaDocument):
                media_type = 'document'
                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                media_path = os.path.join(MEDIA_DIR, f'doc_{message.id}_{timestamp}')
                await self.client.download_media(message, media_path)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        news = News(
            source_channel=chat.username or str(chat.id),
            message_id=message.id,
            content=content,
            has_media=has_media,
            media_type=media_type,
            media_path=media_path
        )
        
        self.session.add(news)
        self.session.commit()
        
        logger.info(f"–ù–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞ {chat.username or chat.id}, ID: {news.id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –≤—Å–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º —á–µ—Ä–µ–∑ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞
        await self.notify_moderators_about_new_news(news)

    async def notify_moderators_about_new_news(self, news):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏"""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞
            for moderator_id in MODERATOR_IDS:
                # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
                inline_keyboard = {
                    "inline_keyboard": [
                        [
                            {"text": "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", "callback_data": f"approve_{news.id}"},
                            {"text": "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "callback_data": f"edit_{news.id}"},
                            {"text": "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", "callback_data": f"reject_{news.id}"}
                        ]
                    ]
                }
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message_text = f"üì¢ <b>–ù–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å ‚Ññ{news.id}</b> –∏–∑ –∫–∞–Ω–∞–ª–∞ <b>{news.source_channel}</b>:\n\n{news.content}"
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –º–µ–¥–∏–∞
                if news.has_media and news.media_path and os.path.exists(news.media_path):
                    await self.send_media_to_moderator(moderator_id, news, message_text, inline_keyboard)
                else:
                    # –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
                    await self.send_text_to_moderator(moderator_id, message_text, inline_keyboard)
                
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É {moderator_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏: {e}")

    async def send_text_to_moderator(self, moderator_id, text, inline_keyboard):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞"""
        bot_api_url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        
        payload = {
            "chat_id": moderator_id,
            "text": text,
            "parse_mode": "HTML",
            "reply_markup": json.dumps(inline_keyboard)
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(bot_api_url, json=payload) as response:
                if response.status != 200:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {await response.text()}")

    async def send_media_to_moderator(self, moderator_id, news, caption, inline_keyboard):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞"""
        if news.media_type == 'photo':
            bot_api_url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendPhoto"
            file_param = "photo"
        else:  # document
            bot_api_url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendDocument"
            file_param = "document"
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
        data = aiohttp.FormData()
        data.add_field('chat_id', str(moderator_id))
        data.add_field('caption', caption)
        data.add_field('parse_mode', 'HTML')
        data.add_field('reply_markup', json.dumps(inline_keyboard))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(news.media_path, 'rb') as file:
            data.add_field(file_param, file, 
                          filename=os.path.basename(news.media_path),
                          content_type='application/octet-stream')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        async with aiohttp.ClientSession() as session:
            async with session.post(bot_api_url, data=data) as response:
                if response.status != 200:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞: {await response.text()}")


async def run_parser():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞
    parser = NewsParser()
    await parser.start()


if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(run_parser())
    except KeyboardInterrupt:
        print("–ü–∞—Ä—Å–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    finally:
        loop.close() 